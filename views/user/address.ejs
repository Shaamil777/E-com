<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!--=============== FLATICON ===============-->
    <link
      rel="stylesheet"
      href="https://cdn-uicons.flaticon.com/2.0.0/uicons-regular-straight/css/uicons-regular-straight.css"
    />

    <!--=============== SWIPER CSS ===============-->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"
    />

    <!--=============== CSS ===============-->
    <link rel="stylesheet" href="/styles/account.css" />
    <link rel="stylesheet" href="/styles/user.css">

    <title>Ecommerce Website</title>
    
  </head>
  <body>

    <!--================ HEADER =================-->

    <%- include('../partials/userHeader') %>

    <main class="main">
        <!--=============== BREADCRUMB ===============-->
        <section class="breadcrumb">
          <ul class="breadcrumb__list flex container">
            <li><a href="home" class="breadcrumb__link">Home</a></li>
            <li><span class="breadcrumb__link">></span></li>
            <li><span class="breadcrumb__link">Account</span></li>
          </ul>
        </section>
    
        <!--=============== ACCOUNTS ===============-->
        <section class="accounts section--lg">
          <div class="accounts__container container grid">
            <div class="account__tabs">
                <p id="dashboard" class="account__tab " data-target="#dashboard">
                    <i class="fi fi-rs-settings-sliders"></i> Profile
                  </p>
               
                  <p id="orders" class="account__tab" data-target="#orders">
                    <i  class="fi fi-rs-shopping-bag"></i> Orders
                  </p>
                  <p id="updateProfile" class="account__tab  " data-target="#update-profile">
                    <i class="fi fi-rs-user"></i> Update Profile
                  </p>
                  <p id="wallet" class="account__tab" data-target="#wallet">
                    <i class="fi fi-rs-wallet"></i> Wallet
                  </p>
                  <p id="address" class="account__tab active-tab" data-target="#address">
                    <i class="fi fi-rs-marker"></i> My Address
                  </p>
                  <p id="changePassword" class="account__tab " data-target="#change-password">
                    <i class="fi fi-rs-settings-sliders"></i> Change Password
                  </p>
                  <p id="logout" class="account__tab"><i class="fi fi-rs-exit"></i> Logout</p>
                </div>
    

            <div class="tabs__content">

              <div class="tab__content" id="address">
                <h3 class="tab__header">Shipping Addresses</h3>
                
                <% if (addresses.length > 0) { %>
                    <% addresses.forEach(address => { %>
                        <div class="tab__body" data-id="<%= address._id %>">
                            <p class="text-dark">House Name: <%= address.housename %></p>
                            <p class="text-dark">Country: <%= address.country %></p>
                            <p class="text-dark">State: <%= address.state %></p>
                            <p class="text-dark">District: <%= address.district %></p>
                            <p class="text-dark">City: <%= address.city %></p>
                            <p class="text-dark">Pincode: <%= address.pincode %></p>
                            <a href="#" id="edit" class="Edit text-success">Edit</a>
                            <br>
                            <a href="#" id="delete" class="delete text-danger">Delete</a>
                            <hr> <!-- Separator for each address -->
                        </div>
                    <% }) %>
                <% } else { %>
                    <p class="text-dark">No addresses found.</p>
                <% } %>
            </div>
            
            
              <button id="add" class="btn btn-success mt-2 rounded">Add</button>
              
            
              <form id="addAddressForm" class="form grid mt-3" style="display: none;">
                  <input
                      type="text"
                      id="houseName"
                      name="houseName"
                      placeholder="House Name"
                      class="form__input mt-1"
                      required
                  />
                  <br>
                  <p id="houseErr" style="color: red;"></p>
                  <input
                      type="text"
                      id="country"
                      name="country"
                      placeholder="Country"
                      class="form__input mt-1"                      required
                  />
                  <br>
                  <p id="countryErr" style="color: red;"></p>
                  <input
                      type="text"
                      id="state"
                      name="state"
                      placeholder="State"
                      class="form__input mt-1"                      required
                  />
                  <br>
                  <p id="stateErr" style="color: red;"></p>
                  <input
                      type="text"
                      id="district"
                      name="district"
                      placeholder="District"
                      class="form__input mt-1"                      required
                  />
                  <br>
                  <p id="disErr" style="color: red;"></p>
                  <input
                      type="text"
                      id="city"
                      name="city"
                      placeholder="City"
                      class="form__input mt-1"                      required
                  />
                  <br>
                  <p id="cityErr" style="color: red;"></p>
                  <input
                      type="text"
                      id="pincode"
                      name="pincode"
                      placeholder="Pincode"
                      class="form__input mt-1"                      required
                  />
                  <br>
                  <p id="pinErr" style="color: red;"></p>
                  <button type="submit" class="btn btn-success btn--md mt-2 rounded">Save Address</button>
                </form>
                <button id="close" class="btn btn-danger mt-2 rounded" style="display: none;">Close</button>

                
                <form id="editAddressForm" class="form grid mt-3" style="display: none;">
                  <input type="text" id="editHouseName" name="houseName" placeholder="House Name" class="form__input mt-1" required />
                  <p id="editHouseErr" style="color: red;"></p>
                  <input type="text" id="editCountry" name="country" placeholder="Country" class="form__input mt-1" required />
                  <p id="editCountryErr" style="color: red;"></p>
                  <input type="text" id="editState" name="state" placeholder="State" class="form__input mt-1" required />
                  <p id="editStateErr" style="color: red;"></p>
                  <input type="text" id="editDistrict" name="district" placeholder="District" class="form__input mt-1" required />
                  <p id="editDistrictErr" style="color: red;"></p>
                  <input type="text" id="editCity" name="city" placeholder="City" class="form__input mt-1" required />
                  <p id="editCityErr" style="color: red;"></p>
                  <input type="text" id="editPincode" name="pincode" placeholder="Pincode" class="form__input mt-1" required />
                  <p id="editPinErr" style="color: red;"></p>
                  <button id="savebtn" type="submit" class="btn btn-success btn--md mt-2 rounded savebtn">Save Changes</button>
              </form>
              <button id="editClose" class="btn btn-danger mt-2 rounded" style="display: none;">Close</button>
              
          </div>
              </div>
              
              </div>
              </div>

              <%- include('../partials/userFooter') %>
        
          

              <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
              <!--=============== SWIPER JS ===============-->
          <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
      
          <!--=============== MAIN JS ===============-->
          <script src="assets/js/main.js"></script>
        </body>
        </html>
      
        <script>
            document.getElementById('dashboard').addEventListener('click', function(){
                window.location.href = '/profile'
            })
    
            document.getElementById('orders').addEventListener('click', function(){
                window.location.href = '/orders'
            })
    
            document.getElementById('updateProfile').addEventListener('click', function(){
                window.location.href = '/updateprofile'
            })
    
            document.getElementById('wallet').addEventListener('click', function(){
                window.location.href = '/wallet'
            })
    
            document.getElementById('address').addEventListener('click', function(){
                window.location.href = '/address'
            })
    
            document.getElementById('changePassword').addEventListener('click', function(){
                window.location.href = '/changepassword'
            })

            document.getElementById('logout').addEventListener('click',function(){
      window.location.href = '/logout'
    })

            const add = document.getElementById('add');
const close = document.getElementById('close');
const addAddressForm = document.getElementById('addAddressForm');

// Show the form and Close button when "Add" is clicked
add.addEventListener('click', function () {
    addAddressForm.style.display = 'block'; // Show the form
    close.style.display = 'block';         // Show the Close button
    add.style.display = 'none';            // Hide the Add button
});

// Hide the form and Close button when "Close" is clicked
close.addEventListener('click', function () {
    addAddressForm.style.display = 'none'; // Hide the form
    close.style.display = 'none';          // Hide the Close button
    add.style.display = 'block';           // Show the Add button
});

// Optional: Reset the form when it's closed
close.addEventListener('click', function () {
    addAddressForm.reset(); // Clear the form inputs
});

  
const form = document.getElementById('addAddressForm')
addAddressForm.addEventListener('submit', async function(e) {
  e.preventDefault();
   let isValid = true;

    const houseName = document.getElementById('houseName').value;
    const country = document.getElementById('country').value;
    const state = document.getElementById('state').value;
    const district = document.getElementById('district').value;
    const city = document.getElementById('city').value;
    const pincode = document.getElementById('pincode').value;

    const houseErr = document.getElementById('houseErr')
    const stateErr = document.getElementById('stateErr')
    const districtErr = document.getElementById('districtErr')
    const cityErr = document.getElementById('cityErr')
    const pincodeErr = document.getElementById('pincodeErr')


    if(houseName.trim() === ''){
      houseErr.textContent = "House Name is required";
      isValid = false;  
      setTimeout(()=>{
        houseErr.textContent = '';
      },5000)
    }
    if(country.trim() === ''){
      countryErr.textContent = "Country is required";
      isValid = false;  
      setTimeout(()=>{
        countryErr.textContent = '';
      },5000)
    }
    if(state.trim() === ''){
      stateErr.textContent = "State is required";
      isValid = false;  
      setTimeout(()=>{
        stateErr.textContent = '';
      },5000)
    }
    if(district.trim() === ''){
      districtErr.textContent = "District is required";
      isValid = false;  
      setTimeout(()=>{
        districtErr.textContent = '';
      },5000)
    }
    if(city.trim() === ''){
      cityErr.textContent = "City is required";
      isValid = false;  
      setTimeout(()=>{
        cityErr.textContent = '';
      },5000)
    }
    if(pincode.trim() === ''){
      pincodeErr.textContent = "Pincode is required";
      isValid = false;  
      setTimeout(()=>{
        pincodeErr.textContent = '';
      },5000)
    }
    if(isValid){
      try {
        const response = await fetch('/addaddress',{
          method: 'POST',

          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({houseName, country, state, district, city, pincode})
        })
        const data = await response.json()
        if(data.success){
          await Swal.fire({
          title: 'Success!',
          text: data.message,
          icon: 'success',
          confirmButtonColor: '#3085d6'
        });
          window.location.reload() // Reload the page to reflect the new address in the table

          addAddressForm.style.display = 'none'; // Hide the form
        close.style.display = 'none'; // Hide the Close button
        add.style.display = 'block'; // Show the Add button
        addAddressForm.reset(); // Reset form fields

        }else{
          await Swal.fire({
          title: 'Error!',
          text: data.error,
          icon: 'error',
          confirmButtonColor: '#3085d6'
        });
        }
        
      } catch (error) {
        console.error("Error occured while adding address")
        await Swal.fire({
        title: 'Error!',
        text: 'Failed to add address. Please try again.',
        icon: 'error',
        confirmButtonColor: '#3085d6'
      });
 
      }
    }

})


document.querySelectorAll('.delete').forEach((button)=>{
  button.addEventListener('click',async function(){
    const addressElement = this.closest('.tab__body');
    const addressId = addressElement.getAttribute('data-id');

    const result = await Swal.fire({
      title: 'Are you sure?',
      text: "Do you really want to delete this address? This action cannot be undone.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'Cancel',
    });

    if(result.isConfirmed){

    try {
      const response = await fetch(`/deleteaddress/${addressId}`,{
        method:'PUT'
      });
      const data = await response.json()
      if(data.success){
        
        await Swal.fire({
            title: 'Deleted!',
            text: data.message,
            icon: 'success',
            confirmButtonColor: '#3085d6',
          });
          window.location.reload();
      }else{
        Swal.fire({
            title: 'Error!',
            text: data.error,
            icon: 'error',
            confirmButtonColor: '#3085d6',
          });
      }

    } catch (error) {
      console.error("Error occured while deleting address:",error)
      alert('Failed to delete address')
    }
  }else{
    Swal.fire({
        title: 'Cancelled',
        text: 'Your address is safe!',
        icon: 'info',
        confirmButtonColor: '#3085d6',
      });
  }
  })
})
  

document.querySelectorAll('.Edit').forEach((editButton) => {
  editButton.addEventListener('click', function () {
    // Fetch the address details from the corresponding container
    const addressElement = this.closest('.tab__body');
    const addressId = addressElement.getAttribute('data-id');
    const houseName = addressElement.querySelector('.text-dark:nth-child(1)').textContent.split(': ')[1];
    const country = addressElement.querySelector('.text-dark:nth-child(2)').textContent.split(': ')[1];
    const state = addressElement.querySelector('.text-dark:nth-child(3)').textContent.split(': ')[1];
    const district = addressElement.querySelector('.text-dark:nth-child(4)').textContent.split(': ')[1];
    const city = addressElement.querySelector('.text-dark:nth-child(5)').textContent.split(': ')[1];
    const pincode = addressElement.querySelector('.text-dark:nth-child(6)').textContent.split(': ')[1];

    // Populate the edit form fields
    document.getElementById('editHouseName').value = houseName;
    document.getElementById('editCountry').value = country;
    document.getElementById('editState').value = state;
    document.getElementById('editDistrict').value = district;
    document.getElementById('editCity').value = city;
    document.getElementById('editPincode').value = pincode;

    // Set a data-id attribute on the form to store the address ID
    document.getElementById('editAddressForm').setAttribute('data-id', addressId);

    // Show the edit form and Close button
    const editForm = document.getElementById('editAddressForm');
    const editClose = document.getElementById('editClose');
    editForm.style.display = 'block';
    editClose.style.display = 'block';
    document.getElementById('add').style.display = 'none'; // Hide the Add button
  });
});

document.getElementById('editClose').addEventListener('click', function () {
  // Hide the edit form and Close button
  const editForm = document.getElementById('editAddressForm');
  editForm.style.display = 'none';
  this.style.display = 'none'; // Hide the Close button
  document.getElementById('add').style.display = 'block'; // Show the Add button

  // Optional: Reset the form fields
  editForm.reset();
});

// Save Changes Button
const editAddressForm = document.getElementById('editAddressForm');
editAddressForm.addEventListener('submit', async function (e) {
  e.preventDefault();

  let isValid = true;

  const addressId = editAddressForm.getAttribute('data-id');
  const houseName = document.getElementById('editHouseName').value;
  const country = document.getElementById('editCountry').value;
  const state = document.getElementById('editState').value;
  const district = document.getElementById('editDistrict').value;
  const city = document.getElementById('editCity').value;
  const pincode = document.getElementById('editPincode').value;

  const houseErr = document.getElementById('editHouseErr');
  const stateErr = document.getElementById('editStateErr');
  const districtErr = document.getElementById('editDistrictErr');
  const cityErr = document.getElementById('editCityErr');
  const pincodeErr = document.getElementById('editPinErr');

  // Validate fields
  if (houseName.trim() === '') {
    houseErr.textContent = "House Name is required";
    isValid = false;
    setTimeout(() => {
      houseErr.textContent = '';
    }, 5000);
  }
  if (country.trim() === '') {
    countryErr.textContent = "Country is required";
    isValid = false;
    setTimeout(() => {
      countryErr.textContent = '';
    }, 5000);
  }
  if (state.trim() === '') {
    stateErr.textContent = "State is required";
    isValid = false;
    setTimeout(() => {
      stateErr.textContent = '';
    }, 5000);
  }
  if (district.trim() === '') {
    districtErr.textContent = "District is required";
    isValid = false;
    setTimeout(() => {
      districtErr.textContent = '';
    }, 5000);
  }
  if (city.trim() === '') {
    cityErr.textContent = "City is required";
    isValid = false;
    setTimeout(() => {
      cityErr.textContent = '';
    }, 5000);
  }
  if (pincode.trim() === '') {
    pincodeErr.textContent = "Pincode is required";
    isValid = false;
    setTimeout(() => {
      pincodeErr.textContent = '';
    }, 5000);
  }

  if (isValid) {
    try {
      const response = await fetch(`/updateaddress/${addressId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ houseName, country, state, district, city, pincode })
      });
      const data = await response.json();
      if (data.success) {
        await Swal.fire({
          title: 'Success!',
          text: data.message,
          icon: 'success',
          confirmButtonColor: '#3085d6'
        });
        window.location.reload(); // Reload the page to reflect the changes
        editAddressForm.style.display = 'none';
        document.getElementById('editClose').style.display = 'none';
        document.getElementById('add').style.display = 'block';
        editAddressForm.reset();
      } else {
        await Swal.fire({
          title: 'Error!',
          text: data.error,
          icon: 'error',
          confirmButtonColor: '#3085d6'
        });
      }
    } catch (error) {
      console.error("Error occurred while updating the address:", error);
      await Swal.fire({
        title: 'Error!',
        text: 'Failed to update address. Please try again.',
        icon: 'error',
        confirmButtonColor: '#3085d6'
      });
    }
  }
});




        </script>