<!DOCTYPE html>
<html lang="en">

<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Category Panel</title>
  <!-- Layout styles -->
  <link rel="stylesheet" href="/styles/usermanagement.css">
  <link href="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.css" rel="stylesheet" />
</head>

<body>

  <%- include('../partials/adminSideBar') %>

    <!-- Main Content Section -->
    <div class="container-fluid page-body-wrapper">
      <!-- Navbar -->
      <nav class="navbar p-0 fixed-top d-flex flex-row">
        <div class="navbar-brand-wrapper d-flex d-lg-none align-items-center justify-content-center">
          <a class="navbar-brand brand-logo-mini" href="index.html"><img src="assets/images/logo-mini.svg"
              alt="logo" /></a>
        </div>
        <div class="navbar-menu-wrapper flex-grow d-flex align-items-stretch">
          <button class="navbar-toggler navbar-toggler align-self-center" type="button" data-toggle="minimize">
            <span class="mdi mdi-menu"></span>
          </button>
          <ul class="navbar-nav navbar-nav-right">
            <li class="nav-item dropdown border-left">
              <a class="nav-link count-indicator dropdown-toggle" id="messageDropdown" href="#" data-toggle="dropdown"
                aria-expanded="false">
                <i class="mdi mdi-email"></i><span class="count bg-success"></span>
              </a>
              <div class="dropdown-menu dropdown-menu-right navbar-dropdown preview-list"
                aria-labelledby="messageDropdown">
                <h6 class="p-3 mb-0">Messages</h6>
                <div class="dropdown-divider"></div>
                <p class="p-3 mb-0 text-center">4 new messages</p>
              </div>
            </li>
          </ul>
        </div>
      </nav>

      <!-- Category Form Section -->
      <div class="row p-3 w-100 h-100">
        <div class="col-12 grid-margin">
          <div class="card">
            <div class="card-body">
              <h4 class="card-title">Add New Category</h4>
              <form class="forms-sample" id="categoryForm" enctype="multipart/form-data" novalidate>
                <input style="display: none;" type="file" class="category-image" required />
                <div class="form-group">
                  <label for="category">Name</label>
                  <input type="text" class="form-control category-name" id="categoryName" name="name"
                    placeholder="Category Name" required />
                  <p class="error-message" id="categoryNameError"></p>
                </div>
                <div class="form-group">
                  <label for="categoryImage">Images</label>
                  <input type="file" class="form-control category-image" id="categoryImage" accept="image/*"
                    onchange="previewAndCrop(event)">
                  <p class="error-message" id="categoryImageError"></p>
                </div>
                <div class="form-group previewSection">
                  <img id="cropPreview" style="max-width: 100%; display: none;" />
                  <button type="button" id="cropButton" style="display: none;" onclick="startCropping()">Crop
                    Image</button>
                </div>
                <div class="form-group">

                  <button type="submit" class="btn btn-primary mt-3">
                    Create
                  </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <!-- Script links -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.js"></script>
    <!--     
    <script>
        
    let cropper;

    function previewAndCrop(event) {
      const file = event.target.files[0];
      if (file) {
        const previewImage = document.getElementById('cropPreview');
        previewImage.src = URL.createObjectURL(file);
        document.getElementById('cropPreviewSection').style.display = 'flex';
        startCropping();
      }
    }

    function startCropping() {
      const previewImage = document.getElementById('cropPreview');
      if (cropper) {
        cropper.destroy(); // Destroy previous cropper instance
      }
      cropper = new Cropper(previewImage, {
        aspectRatio: 1,
        viewMode: 1,
        zoomable: false
      });
    }

    function removeImagePreview() {
      document.getElementById('categoryImage').value = ''; // Clear the file input
      document.getElementById('cropPreviewSection').style.display = 'none'; // Hide preview section
      document.getElementById('cropPreview').src = ''; // Clear preview image source
      if (cropper) {
        cropper.destroy(); // Destroy cropper instance
        cropper = null;
      }
    }

    // Capture cropped image and submit with form
    document.querySelector('form').addEventListener('submit', function (e) {
      e.preventDefault(); // Prevent default form submission

      if (cropper) {
        cropper.getCroppedCanvas().toBlob((blob) => {
          const formData = new FormData(this);

          formData.set('categoryImage', blob, 'croppedImage.png');

          fetch('/admin/category/add', {
            method: 'POST',
            body: formData
          })
          .then(response => response.json())
          .then(result => {
            alert(result.message || 'Category added successfully!');
            // Reset the form inputs and preview
            this.reset();
            removeImagePreview();
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Failed to add category.');
          });
        });
      }
    });
 
    </script> -->

    <script>
      let croppedImageFile;
      let isCropped = false;
      let cropper;
      function previewAndCrop(event) {
        const file = event.target.files[0];
        if (!file) return;
        if (!["image/png", "image/jpg", "image/jpeg"].includes(file.type)) {
          const categoryUpdateImageError = document.querySelector(
            "#categoryImageError"
          );
          categoryUpdateImageError.style.display = "block";
          categoryUpdateImageError.textContent =
            "Only jpg, png, and jpeg allowed";
          return;
        };
        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            const cropPreview = document.getElementById("cropPreview");
            cropPreview.src = e.target.result;
            cropPreview.style.display = 'block';
            document.getElementById("cropButton").style.display = 'block';
            if (cropper) {
              cropper.destroy();
            }
            cropper = new Cropper(cropPreview, {
              aspectRatio: NaN,
              viewMode: 0,
              autoCropArea: 1,
              ready() {
                cropper.clear();
                cropper.crop();
              }
            });
          };
          reader.readAsDataURL(file);
        }
      }
      function startCropping() {
        const canvas = cropper.getCroppedCanvas();
        canvas.toBlob((blob) => {
          croppedImageFile = new File([blob], "croppedImage.png", {
            type: "image/png",
            lastModified: Date.now()
          });
          isCropped = true;
          document.querySelector('.previewSection').style.display = "none";
        });
      }

      document.getElementById("categoryForm").addEventListener("submit", function (event) {
        event.preventDefault();
        document.querySelector("#categoryImageError").style.display = "none";
        const categoryName = document.getElementById("categoryName").value.trim();
        const categoryImage = document.getElementById("categoryImage");
        const nameError = document.getElementById("categoryNameError");
        const imageError = document.getElementById("categoryImageError");

        let isValid = true;
        if (!categoryName) {
          nameError.style.display = "block";
          nameError.textContent = "Enter the category name";
          isValid = false;
        } else {
          nameError.style.display = "none";
        }
        if (!categoryImage.files.length) {
          imageError.textContent = "Please upload an image file.";
          imageError.style.display = "block";
          isValid = false;
        } else {
          imageError.style.display = "none";
        }
        if (isValid) {
          const formData = new FormData();
          formData.append("categoryName", categoryName);
          if (isCropped && croppedImageFile) {
            formData.append("categoryImage", croppedImageFile);
          } else {
            formData.append("categoryImage", categoryImage.files[0]);
          }
          async function addData() {
            try {
              const response = await fetch("/admin/category/add", {
                method: "POST",
                body: formData,
              });
              const data = await response.json();
              if (!data.val) {
                document.querySelector("#categoryNameError").style.display = "block";
                document.querySelector("#categoryNameError").textContent = data.msg;
                console.log(data.msg);
              } else {
                document.querySelector("#categoryNameError").style.display = "none";
                window.location.href = "/admin/categorymanagement";
              }
            } catch (err) {
              console.log("Error ::- " + err);
            }
          };
          addData();
        }
      });
    </script>
</body>

</html>